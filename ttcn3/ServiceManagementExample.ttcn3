module ServiceManagementExample {
	import from Lib_ServiceManagement all;

	const charstring idsa_filename := ".ssh/id_dsa";

	template ServiceDefinition LoginGW := {
		protocol := "ssh2",
		hostname := "solv116",
		authentification := { authPubKey :=  {idDsa_filename := idsa_filename}},
		execCommands := {
			startCommand := "sudo /etc/init.d/loginggw start",
			stopCommand := "sudo /etc/init.d/loginggw stop",
			statusCommand := "/etc/init.d/loginggw status"
		},
		returnType :=
			"exitCode"
	}

	template ServiceDefinition UserIdService := {
		protocol := "ssh2",
		hostname := "solv116",
		authentification := { authPubKey := {idDsa_filename := idsa_filename} },
		execCommands := {
			startCommand := "sudo /etc/init.d/userid start",
			stopCommand := "sudo /etc/init.d/userid stop",
			statusCommand := "/etc/init.d/userid status"
		},
		returnType :=
			"console.output"
	}

	type component C {
	}


	testcase T() runs on C system C {

		var charstring serviceStat;

		serviceStat := getServiceStatus(LoginGW);
		if (serviceStat != "0") {
			setverdict(fail);
			stop;
		}

		serviceStat := getServiceStatus(LoginGW);
		if (serviceStat != "running") {
			setverdict(fail);
			stop;
		}


		// execute test function
		serviceStat := stopService(LoginGW);
		if (serviceStat != "stopped") {
			setverdict(fail);
			stop;
		}
		
		// execute slightly modified test function
		setverdict(pass);		
				
	// execute test function
	}
}